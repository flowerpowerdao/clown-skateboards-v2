{
  "directories": {
    "test": "test"
  },
  "scripts": {
    "start": "npm run replica && npm run deploy-local && npm run mint",
    "replica": "dfx stop && rm -rf .dfx && dfx start --clean --background && dfx canister create --all --no-wallet",
    "replica:no-delay": "dfx stop && rm -rf .dfx && dfx start --clean --background --artificial-delay 0 && dfx canister create --all --no-wallet",
    "build": "",
    "deploy-local": "npm run deploy:ledger && npm run deploy:seed && npm run deploy:staging && dfx deploy assets",
    "deploy-test": "npm run reinstall:ledger -- -qq && npm run reinstall:seed -- -qq && npm run reinstall:test -- -qq",
    "deploy:staging": "dfx deploy staging",
    "reinstall:staging": "dfx deploy staging --mode reinstall -y",
    "reinstall:test": "dfx deploy test --mode reinstall -y",
    "upgrade:staging": "dfx canister stop staging && dfx deploy staging --upgrade-unchanged && dfx canister start staging",
    "deploy:ledger": "dfx deploy ledger --argument '(variant { Init = record { minting_account = \"e82226d3101bd8525111e2c6501a79365f2484d82d3f2be96269b78fe200eeaa\"; initial_values = vec { record { \"'${WALLET_ADDRESS:-8b61ff722d7e6321eb99bb607ab0cf323b3c64b43d6a13c245c8a4e197f7b38b}'\"; record { e8s=1_000_000_000_000_000 } }; }; send_whitelist = vec {}} })'",
    "deploy:seed": "dfx deploy seed --argument '(variant { Init = record { minting_account = \"e82226d3101bd8525111e2c6501a79365f2484d82d3f2be96269b78fe200eeaa\"; initial_values = vec { record { \"'${WALLET_ADDRESS:-8b61ff722d7e6321eb99bb607ab0cf323b3c64b43d6a13c245c8a4e197f7b38b}'\"; record { e8s=1_000_000_000_000_000 } }; }; send_whitelist = vec {}; transfer_fee = opt record { e8s = 1_000 : nat64; }} })'",
    "reinstall:ledger": "npm run deploy:ledger -- --mode reinstall -y",
    "reinstall:seed": "npm run deploy:seed -- --mode reinstall -y",
    "mint": "dfx canister call staging addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call staging initMint && dfx canister call staging shuffleTokensForSale && dfx canister call staging enableSale",
    "mint-2": "dfx canister call staging addAsset '(record {name = \"privat0\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world0!\"} } })' && dfx canister call staging addAsset '(record {name = \"privat1\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world1!\"} } })' && dfx canister call staging initMint && dfx canister call staging shuffleTokensForSale && dfx canister call staging enableSale",
    "mint:test": "dfx canister call test addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call test initMint && dfx canister call test shuffleTokensForSale && dfx canister call test enableSale",
    "mint:test-2": "dfx canister call test addAsset '(record {name = \"privat0\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world0!\"} } })' && dfx canister call test addAsset '(record {name = \"privat1\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world1!\"} } })' && dfx canister call test initMint && dfx canister call test shuffleTokensForSale && dfx canister call test enableSale",
    "vitest": "vitest run --pool forks --poolOptions.forks.singleFork true --poolOptions.forks.isolate false",
    "vitest:watch": "vitest watch",
    "env": "tsx ./test/e2e/apply-env.ts",
    "test:e2e": "dfx build staging && vitest run --pool forks --poolOptions.forks.singleFork true --poolOptions.forks.isolate false --reporter verbose --bail 1",
    "test:unit": "mops test",
    "test": "npm run test:unit && npm run test:e2e",
    "backup": "tsx ./backup/backup.ts",
    "restore": "tsx ./backup/restore.ts",
    "test-br": "npm run deploy-test && tsx ./backup/test.ts",
    "test-br-assets": "tsx ./backup/test-assets.ts",
    "deploy": "tsx ./deploy/deploy.ts",
    "upgrade-staging": "dfx deploy --network ic staging --upgrade-unchanged",
    "upgrade-production": "dfx canister --network ic stop production && dfx deploy --network ic production --upgrade-unchanged && dfx canister --network ic start production",
    "": ""
  },
  "devDependencies": {
    "@dfinity/agent": "1.3.0",
    "@dfinity/identity": "1.3.0",
    "@dfinity/identity-secp256k1": "1.3.0",
    "@dfinity/ledger-icp": "2.2.4",
    "@dfinity/ledger-icrc": "2.3.1",
    "@dfinity/principal": "1.3.0",
    "@types/node": "20.12.12",
    "chalk": "5.3.0",
    "chunk": "^0.0.3",
    "minimist": "^1.2.8",
    "pem-file": "^1.0.1",
    "tsx": "4.11.0",
    "typescript": "5.4.5",
    "vite": "5.2.11",
    "vitest": "1.6.0"
  }
}
